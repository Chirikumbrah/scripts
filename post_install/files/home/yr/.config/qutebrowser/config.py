from qutebrowser.api import interceptor
# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

def filter_yt(info: interceptor.Request):
    url = info.request_url
    if (
            url.host() == "www.youtube.com"
            and url.path() == "/get_video_info"
            and "&adformat=" in url.query()
        ):
            info.block()

interceptor.register(filter_yt)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable dark mode
config.set("colors.webpage.darkmode.enabled", True)

# Prefer dark mode
c.colors.webpage.preferred_color_scheme = "dark"


# Default download folder
c.downloads.location.directory = '~/Downloads'

# Custom mappings
c.bindings.commands = {
    'insert': {
        'jk' : 'mode-leave',
    },
    'normal': {
        'e'  : 'hint links spawn mpv {hint-url}',
        'I'  : 'hint images download',
        'wq' : 'quit --save',
        'J'  : 'tab-prev',
        'K'  : 'tab-next',
        'T'  : 'open -t',
        '>'  : 'tab-move +',
        '<'  : 'tab-move -',
    },
}

# Only show tabs when more than one tab is open
c.tabs.show = 'multiple' # switching, always, never
c.tabs.show_switching_delay = 2222

# Auto saving session
c.auto_save.session = True

# Homepage
c.url.default_page = 'https://startpage.com/'
c.url.start_pages = 'https://startpage.com/'

# Search engines
c.url.searchengines = {'DEFAULT': 'https://startpage.com/search?q={}',
        'arch': 'https://wiki.archlinux.org/?search={}',
        'wiki': 'https://wikiless.org/wiki/{}',
        'ody': 'https://odysee.com/$/search?q={}',
        'yt': 'https://yewtu.be/search?q={}',
        'enru': 'https://www.deepl.com/en/translator#en/ru/{}',
        'ruen': 'https://www.deepl.com/en/translator#ru/en/{}'
}

# Colors
# Webpage default backgroun
c.colors.webpage.bg = '#282a36'

# Tab bar colors
c.colors.tabs.bar.bg = '#282a36'
c.colors.tabs.indicator.error = '#ff5555'
c.colors.tabs.indicator.start = '#bd93f9'
c.colors.tabs.indicator.stop = '#50fa7b'
c.colors.tabs.bar.bg = '#44475a'
c.colors.tabs.even.bg = '#44475a'
c.colors.tabs.indicator.stop = '#50fa7b'
c.colors.tabs.odd.bg = '#44475a'
c.colors.tabs.pinned.even.bg = '#44475a'
c.colors.tabs.pinned.odd.bg = '#44475a'
c.colors.tabs.pinned.selected.even.bg = '#bd93f9'
c.colors.tabs.pinned.selected.even.fg = '#282a36' 
c.colors.tabs.pinned.selected.odd.bg = '#bd93f9'
c.colors.tabs.pinned.selected.odd.fg = '#282a36' 
c.colors.tabs.selected.even.bg = '#bd93f9'
c.colors.tabs.selected.even.fg = '#282a36' 
c.colors.tabs.selected.odd.bg = '#bd93f9'
c.colors.tabs.selected.odd.fg = '#282a36' 

# Tab bar settins
c.tabs.last_close = 'close'
c.tabs.position = 'top'
c.tabs.title.alignment = 'left'
c.tabs.width = '15%'
c.tabs.wrap = True

# Global settings 
c.scrolling.smooth = False
c.session.lazy_restore = True

# Statusbar colors
c.colors.statusbar.url.warn.fg = '#ffb86c'
c.colors.statusbar.normal.bg = '#282a36'
c.colors.statusbar.command.bg = '#282a36'
c.colors.statusbar.url.success.https.fg = '#50fa7b'
c.colors.statusbar.url.error.fg = '#ffb86c'
c.colors.statusbar.caret.bg = '#bd93f9'
c.colors.statusbar.caret.fg = '#282a36'
c.colors.statusbar.caret.selection.bg = '#ff79c6'
c.colors.statusbar.caret.selection.fg = '#282a36'
c.colors.statusbar.insert.bg = '#50fa7b'
c.colors.statusbar.insert.fg = '#282a36'

# Hints background
c.colors.hints.bg = '#ffb86c'
c.hints.border = '0'

c.fileselect.multiple_files.command = ['alacritty', '-e', 'ranger', '--choosefiles={}']
c.fileselect.single_file.command = ['alacritty', '-e', 'ranger', '--choosefile={}']
c.fileselect.folder.command = ['alacritty', '-e', 'ranger', '--choosedir={}']
c.editor.command = ['alacritty', '-e', 'hx', '{}']
